(function(e){if(typeof exports=="object"&&typeof module=="object")e(require("../../lib/codemirror"));else if(typeof define=="function"&&define.amd)define(["../../lib/codemirror"],e);else e(CodeMirror)})(function(e){"use strict";e.defineMode("haskell",function(e,t){function n(e,t,n){t(n);return n(e,t)}function h(e,t){if(e.eatWhile(c)){return null}var h=e.next();if(l.test(h)){if(h=="{"&&e.eat("-")){var v="comment";if(e.eat("#")){v="meta"}return n(e,t,p(v,1))}return null}if(h=="'"){if(e.eat("\\")){e.next()}else{e.next()}if(e.eat("'")){return"string"}return"error"}if(h=='"'){return n(e,t,d)}if(i.test(h)){e.eatWhile(a);if(e.eat(".")){return"qualifier"}return"variable-2"}if(r.test(h)){e.eatWhile(a);return"variable"}if(s.test(h)){if(h=="0"){if(e.eat(/[xX]/)){e.eatWhile(o);return"integer"}if(e.eat(/[oO]/)){e.eatWhile(u);return"number"}}e.eatWhile(s);var v="number";if(e.match(/^\.\d+/)){v="number"}if(e.eat(/[eE]/)){v="number";e.eat(/[-+]/);e.eatWhile(s)}return v}if(h=="."&&e.eat("."))return"keyword";if(f.test(h)){if(h=="-"&&e.eat(/-/)){e.eatWhile(/-/);if(!e.eat(f)){e.skipToEnd();return"comment"}}var v="variable";if(h==":"){v="variable-2"}e.eatWhile(f);return v}return"error"}function p(e,t){if(t==0){return h}return function(n,r){var i=t;while(!n.eol()){var s=n.next();if(s=="{"&&n.eat("-")){++i}else if(s=="-"&&n.eat("}")){--i;if(i==0){r(h);return e}}}r(p(e,i));return e}}function d(e,t){while(!e.eol()){var n=e.next();if(n=='"'){t(h);return"string"}if(n=="\\"){if(e.eol()||e.eat(c)){t(v);return"string"}if(e.eat("&")){}else{e.next()}}}t(h);return"error"}function v(e,t){if(e.eat("\\")){return n(e,t,d)}e.next();t(h);return"error"}var r=/[a-z_]/;var i=/[A-Z]/;var s=/\d/;var o=/[0-9A-Fa-f]/;var u=/[0-7]/;var a=/[a-z_A-Z0-9']/;var f=/[-!#$%&*+.\/<=>?@\\^|~:]/;var l=/[(),;[\]`{}]/;var c=/[ \t\v\f]/;var m=function(){function n(t){return function(){for(var n=0;n<arguments.length;n++)e[arguments[n]]=t}}var e={};n("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_");n("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>");n("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**");n("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True");n("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var r=t.overrideKeywords;if(r)for(var i in r)if(r.hasOwnProperty(i))e[i]=r[i];return e}();return{startState:function(){return{f:h}},copyState:function(e){return{f:e.f}},token:function(e,t){var n=t.f(e,function(e){t.f=e});var r=e.current();return m.hasOwnProperty(r)?m[r]:n},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}});e.defineMIME("text/x-haskell","haskell")})