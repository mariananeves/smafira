function Failure(e){this.message=e}function indexOf(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;++n)if(e[n]==t)return n;return-1}function test(e,t,n){var r=e;var i=2;while(indexOf(allNames,e)!==-1){e=r+"_"+i;i++}allNames.push(e);tests.push({name:e,func:t,expectedFail:n});return e}function testCM(e,t,n,r){return test(namespace+e,function(){var e=document.getElementById("testground"),r=window.cm=CodeMirror(e,n);var i=false;try{t(r);i=true}finally{if(!i||verbose){e.style.visibility="visible"}else{e.removeChild(r.getWrapperElement())}}},r)}function runTests(e){function n(r){for(;;){if(r===tests.length){running=false;return e("done")}var i=tests[r],s=false;if(filters.length){s=true;for(var o=0;o<filters.length;o++)if(i.name.match(filters[o]))s=false}if(s){e("skipped",i.name,l);r++}else{break}}var u=i.expectedFail,a=+(new Date),f=false;try{var l=i.func()}catch(c){f=true;if(u)e("expected",i.name);else if(c instanceof Failure)e("fail",i.name,c.message);else{var h=/(?:\bat |@).*?([^\/:]+):(\d+)/.exec(c.stack);if(h)console["log"](c.stack);e("error",i.name,c.toString()+(h?" ("+h[1]+":"+h[2]+")":""))}}if(!f){if(u)e("fail",i.name,l||"expected failure, but succeeded");else e("ok",i.name,l)}if(!quit){var p=0;t+=+(new Date)-a;if(t>500){t=0;p=50}setTimeout(function(){n(r+1)},p)}else{running=false;return null}}var t=0;n(0)}function label(e,t){if(t)return e+" ("+t+")";return e}function eq(e,t,n){if(e!=t)throw new Failure(label(e+" != "+t,n))}function near(e,t,n,r){if(Math.abs(e-t)>n)throw new Failure(label(e+" is not close to "+t+" ("+n+")",r))}function eqPos(e,t,n){function r(e){return"{line:"+e.line+",ch:"+e.ch+"}"}if(e==t)return;if(e==null)throw new Failure(label("comparing null to "+r(t),n));if(t==null)throw new Failure(label("comparing "+r(e)+" to null",n));if(e.line!=t.line||e.ch!=t.ch)throw new Failure(label(r(e)+" != "+r(t),n))}function is(e,t){if(!e)throw new Failure(label("assertion failed",t))}function countTests(){if(!filters.length)return tests.length;var e=0;for(var t=0;t<tests.length;++t){var n=tests[t].name;for(var r=0;r<filters.length;r++){if(n.match(filters[r])){++e;break}}}return e}function parseTestFilter(e){if(/_\*$/.test(e))return new RegExp("^"+e.slice(0,e.length-2),"i");else return new RegExp(e,"i")}var tests=[],filters=[],allNames=[];Failure.prototype.toString=function(){return this.message};var namespace=""